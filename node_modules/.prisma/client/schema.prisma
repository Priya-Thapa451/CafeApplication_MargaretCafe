generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                       Int            @id @default(autoincrement())
  email                    String         @unique
  name                     String?
  password                 String
  role                     Role           @default(USER)
  isVerified               Boolean        @default(false)
  verificationToken        String?
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt
  resetPasswordToken       String?
  resetPasswordTokenExpiry DateTime?
  refreshToken             RefreshToken[]
  orders                   Order[] // Orders placed by the user
  staff                    Staff?
  isAdmin                  Boolean        @default(false) // Admin flag
  cartItems                Cart[]
  Customer                 Customer[]
}

model Customer {
  id      Int      @id @default(autoincrement())
  name    String
  address String
  phone   String   @unique
  dob     DateTime
  gender  String
  user    User?    @relation(fields: [userId], references: [id])
  userId  Int?     @unique
}

model RefreshToken {
  id     Int    @id @default(autoincrement())
  token  String @unique
  userId Int
  user   User   @relation(fields: [userId], references: [id])
}

model Staff {
  id     Int    @id @default(autoincrement())
  name   String
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique
}

model Admin {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  name     String?
  password String
}

model Menu {
  id          String       @id @default(uuid())
  name        String
  description String?
  price       Float
  category    MenuCategory
  available   Boolean      @default(true)
  imageUrl    String?
  orders      OrderItem[] // Orders associated with menu items
  cartItems   Cart[]
}

model Cart {
  id       Int    @id @default(autoincrement())
  userId   Int
  user     User   @relation(fields: [userId], references: [id])
  menuId   String
  menu     Menu   @relation(fields: [menuId], references: [id])
  quantity Int    @default(1)

  @@unique([userId, menuId]) // Ensures a user can only have one cart entry per menu item
}

model Order {
  id             Int         @id @default(autoincrement())
  userId         Int // Foreign key
  totalAmount    Float
  paymentMethod  String
  address        String
  orderType      String
  status         String
  deliveryCharge Float       @default(0)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  user           User        @relation(fields: [userId], references: [id]) // Add this line to define the opposite relation
  items          OrderItem[]
}

model OrderItem {
  id       Int    @id @default(autoincrement())
  orderId  Int
  menuId   String // Changed productId to menuId for consistency
  quantity Int
  price    Float
  order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menu     Menu   @relation(fields: [menuId], references: [id])
}

enum MenuCategory {
  BEVERAGES
  PASTRIES_BAKED_GOODS
  SANDWICHES_WRAP
  BREAKFAST_ITEMS
  SALADS
  DESSERTS
}

enum Role {
  USER
  STAFF
}
